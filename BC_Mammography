{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"elapsed":31392,"status":"error","timestamp":1710432782894,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"KlLoFewhgnl5","outputId":"c5dcb169-52f3-4926-d88d-c0822c5718e3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading cbis-ddsm-breast-cancer-image-dataset, 5318997088 bytes compressed\n","[==================================================] 5318997088 bytes downloaded\n","Downloaded and uncompressed: cbis-ddsm-breast-cancer-image-dataset\n","Data source import complete.\n"]}],"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING ='cbis-ddsm-breast-cancer-image-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F1115384%2F1873742%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240313%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240313T144250Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D124e8129c911d27c8d6db11feedb792f022ffead0584c95d765d07df043f329a3b52790fd6f23e9129ed76b439e7b736b3ce78e6eb5573353fa71f07c60fdb1229615f2c022cb2654305e736c58fb7d4e32661c846f544482924902e5ea374d2aafa9b4c765d9373ed00716d8cf4a50635035f6deddbfd648b1df052e85c94159ca59086b89f61bd34f36648d567d56a07e8b602cb074b68739e5d0bb437d4cdea5ae8478aa17b92bb36414956b5749731fba66c49cfa6da9be76374b962ea8ea0513bb60e374aa0a43a67a2c82dcde29b2e5e495e8b1472d5b9609e75e82ed10882977441ac121c94da17db68fe059e2e6f401eff6f349416b2faf0faa0d164'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"AP-_T0exgnmB"},"outputs":[],"source":["import os\n","from os import listdir\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import plotly.express as px\n","import seaborn as sns\n","\n","import cv2\n","from matplotlib.image import imread\n","\n","import tensorflow as tf\n","from tensorflow.keras.utils import to_categorical\n","from keras.preprocessing import image\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","\n","\n","import glob\n","import PIL\n","import random\n","\n","random.seed(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"scEEer6MgnmC"},"outputs":[],"source":["csv_path = '/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/meta.csv'\n","df_meta = pd.read_csv(csv_path)\n","dicom_data = pd.read_csv('/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/dicom_info.csv')\n","\n","image_dir = '/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg'\n","full_mammogram_images = dicom_data[dicom_data.SeriesDescription == 'full mammogram images'].image_path\n","cropped_images = dicom_data[dicom_data.SeriesDescription == 'cropped images'].image_path\n","roi_mask_images = dicom_data[dicom_data.SeriesDescription == 'ROI mask images'].image_path\n","\n","full_mammogram_images = full_mammogram_images.apply(lambda x: x.replace('CBIS-DDSM/jpeg', image_dir))\n","cropped_images = cropped_images.apply(lambda x: x.replace('CBIS-DDSM/jpeg', image_dir))\n","roi_mask_images = roi_mask_images.apply(lambda x: x.replace('CBIS-DDSM/jpeg', image_dir))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"9MILBXeFgnmC"},"outputs":[],"source":["full_mammogram_dict = dict()\n","cropped_dict = dict()\n","roi_mask_dict = dict()\n","\n","for dicom in full_mammogram_images:\n","    # print(dicom)\n","    key = dicom.split(\"/\")[5]\n","    # print(key)\n","    full_mammogram_dict[key] = dicom\n","for dicom in cropped_images:\n","    key = dicom.split(\"/\")[5]\n","    cropped_dict[key] = dicom\n","for dicom in roi_mask_images:\n","    key = dicom.split(\"/\")[5]\n","    roi_mask_dict[key] = dicom"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Wc8QLFcagnmD"},"outputs":[],"source":["mass_train_data = pd.read_csv('/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/mass_case_description_train_set.csv')\n","mass_test_data = pd.read_csv('/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/mass_case_description_test_set.csv')\n","calc_train_data = pd.read_csv('/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/calc_case_description_train_set.csv')\n","calc_test_data = pd.read_csv('/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/csv/calc_case_description_test_set.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"SbKvuNjEgnmD"},"outputs":[],"source":["def fix_image_path_mass(dataset):\n","    for i, img in enumerate(dataset.values):\n","        img_name = img[11].split(\"/\")[2]\n","        if img_name in full_mammogram_dict:\n","            dataset.iloc[i, 11] = full_mammogram_dict[img_name]\n","\n","        img_name = img[12].split(\"/\")[2]\n","        if img_name in cropped_dict:\n","            dataset.iloc[i, 12] = cropped_dict[img_name]\n","\n","        img_name = img[13].split(\"/\")[2]\n","        if img_name in roi_mask_dict:\n","            dataset.iloc[i, 13] = roi_mask_dict[img_name]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"HejcJvjvgnmE"},"outputs":[],"source":["fix_image_path_mass(mass_train_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"XFQG1L0EgnmE"},"outputs":[],"source":["fix_image_path_mass(mass_test_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"yYULMiOxgnmF"},"outputs":[],"source":["fix_image_path_mass(calc_train_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"46c_XvivgnmG"},"outputs":[],"source":["fix_image_path_mass(calc_test_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"BYDhl2s4gnmG"},"outputs":[],"source":["mass_train = mass_train_data.rename(columns={'left or right breast': 'left_or_right_breast',\n","                                           'image view': 'image_view',\n","                                           'abnormality id': 'abnormality_id',\n","                                           'abnormality type': 'abnormality_type',\n","                                           'mass shape': 'mass_shape',\n","                                           'mass margins': 'mass_margins',\n","                                           'image file path': 'image_file_path',\n","                                           'cropped image file path': 'cropped_image_file_path',\n","                                           'ROI mask file path': 'ROI_mask_file_path'})\n","\n","mass_test = mass_test_data.rename(columns={'left or right breast': 'left_or_right_breast',\n","                                           'image view': 'image_view',\n","                                           'abnormality id': 'abnormality_id',\n","                                           'abnormality type': 'abnormality_type',\n","                                           'mass shape': 'mass_shape',\n","                                           'mass margins': 'mass_margins',\n","                                           'image file path': 'image_file_path',\n","                                           'cropped image file path': 'cropped_image_file_path',\n","                                           'ROI mask file path': 'ROI_mask_file_path'})\n","\n","calc_train = calc_train_data.rename(columns={'left or right breast': 'left_or_right_breast',\n","                                             'breast density':'breast_density',\n","                                           'image view': 'image_view',\n","                                           'abnormality id': 'abnormality_id',\n","                                           'abnormality type': 'abnormality_type',\n","                                           'calc type': 'calc_type',\n","                                           'calc distribution': 'calc_distribution',\n","                                           'image file path': 'image_file_path',\n","                                           'cropped image file path': 'cropped_image_file_path',\n","                                           'ROI mask file path': 'ROI_mask_file_path'})\n","\n","calc_test = calc_test_data.rename(columns={'left or right breast': 'left_or_right_breast',\n","                                             'breast density':'breast_density',\n","                                           'image view': 'image_view',\n","                                           'abnormality id': 'abnormality_id',\n","                                           'abnormality type': 'abnormality_type',\n","                                           'calc type': 'calc_type',\n","                                           'calc distribution': 'calc_distribution',\n","                                           'image file path': 'image_file_path',\n","                                           'cropped image file path': 'cropped_image_file_path',\n","                                           'ROI mask file path': 'ROI_mask_file_path'})"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32193,"status":"aborted","timestamp":1710432781938,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"7_b8d7bggnmG","outputId":"cd26ea54-2f4e-45b8-d084-f065e9795ed2"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"mass_train\",\n  \"rows\": 1318,\n  \"fields\": [\n    {\n      \"column\": \"patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 691,\n        \"samples\": [\n          \"P_01088\",\n          \"P_01876\",\n          \"P_00733\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"breast_density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left_or_right_breast\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"RIGHT\",\n          \"LEFT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_view\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"MLO\",\n          \"CC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abnormality_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abnormality_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"mass\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass_shape\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"IRREGULAR-ARCHITECTURAL_DISTORTION\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass_margins\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"CIRCUMSCRIBED-ILL_DEFINED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assessment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pathology\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"MALIGNANT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subtlety\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1231,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.214159660811754034822231515062693367987/1-055.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cropped_image_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1318,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.104298620213356299825970953310078805855/1-091.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROI_mask_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1318,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.104298620213356299825970953310078805855/2-090.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"mass_train"},"text/html":["\n","  <div id=\"df-8d478826-6fa7-489d-82a7-386c145b8ed2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>patient_id</th>\n","      <th>breast_density</th>\n","      <th>left_or_right_breast</th>\n","      <th>image_view</th>\n","      <th>abnormality_id</th>\n","      <th>abnormality_type</th>\n","      <th>mass_shape</th>\n","      <th>mass_margins</th>\n","      <th>assessment</th>\n","      <th>pathology</th>\n","      <th>subtlety</th>\n","      <th>image_file_path</th>\n","      <th>cropped_image_file_path</th>\n","      <th>ROI_mask_file_path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>P_00001</td>\n","      <td>3</td>\n","      <td>LEFT</td>\n","      <td>CC</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>IRREGULAR-ARCHITECTURAL_DISTORTION</td>\n","      <td>SPICULATED</td>\n","      <td>4</td>\n","      <td>MALIGNANT</td>\n","      <td>4</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>P_00001</td>\n","      <td>3</td>\n","      <td>LEFT</td>\n","      <td>MLO</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>IRREGULAR-ARCHITECTURAL_DISTORTION</td>\n","      <td>SPICULATED</td>\n","      <td>4</td>\n","      <td>MALIGNANT</td>\n","      <td>4</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>P_00004</td>\n","      <td>3</td>\n","      <td>LEFT</td>\n","      <td>CC</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>ARCHITECTURAL_DISTORTION</td>\n","      <td>ILL_DEFINED</td>\n","      <td>4</td>\n","      <td>BENIGN</td>\n","      <td>3</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>P_00004</td>\n","      <td>3</td>\n","      <td>LEFT</td>\n","      <td>MLO</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>ARCHITECTURAL_DISTORTION</td>\n","      <td>ILL_DEFINED</td>\n","      <td>4</td>\n","      <td>BENIGN</td>\n","      <td>3</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>P_00004</td>\n","      <td>3</td>\n","      <td>RIGHT</td>\n","      <td>MLO</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>OVAL</td>\n","      <td>CIRCUMSCRIBED</td>\n","      <td>4</td>\n","      <td>BENIGN</td>\n","      <td>5</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d478826-6fa7-489d-82a7-386c145b8ed2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d478826-6fa7-489d-82a7-386c145b8ed2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d478826-6fa7-489d-82a7-386c145b8ed2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a36024ce-5d47-4c58-9ea5-7e14dc54bdf6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a36024ce-5d47-4c58-9ea5-7e14dc54bdf6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a36024ce-5d47-4c58-9ea5-7e14dc54bdf6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["  patient_id  breast_density left_or_right_breast image_view  abnormality_id  \\\n","0    P_00001               3                 LEFT         CC               1   \n","1    P_00001               3                 LEFT        MLO               1   \n","2    P_00004               3                 LEFT         CC               1   \n","3    P_00004               3                 LEFT        MLO               1   \n","4    P_00004               3                RIGHT        MLO               1   \n","\n","  abnormality_type                          mass_shape   mass_margins  \\\n","0             mass  IRREGULAR-ARCHITECTURAL_DISTORTION     SPICULATED   \n","1             mass  IRREGULAR-ARCHITECTURAL_DISTORTION     SPICULATED   \n","2             mass            ARCHITECTURAL_DISTORTION    ILL_DEFINED   \n","3             mass            ARCHITECTURAL_DISTORTION    ILL_DEFINED   \n","4             mass                                OVAL  CIRCUMSCRIBED   \n","\n","   assessment  pathology  subtlety  \\\n","0           4  MALIGNANT         4   \n","1           4  MALIGNANT         4   \n","2           4     BENIGN         3   \n","3           4     BENIGN         3   \n","4           4     BENIGN         5   \n","\n","                                     image_file_path  \\\n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","\n","                             cropped_image_file_path  \\\n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","\n","                                  ROI_mask_file_path  \n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...  \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...  \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...  \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...  \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...  "]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["mass_train.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32193,"status":"aborted","timestamp":1710432781938,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"N759nWHDgnmH","outputId":"364ac573-8336-4afe-bbea-bd1c0cb93a12"},"outputs":[{"data":{"text/plain":["patient_id                 0\n","breast_density             0\n","left_or_right_breast       0\n","image_view                 0\n","abnormality_id             0\n","abnormality_type           0\n","mass_shape                 0\n","mass_margins               0\n","assessment                 0\n","pathology                  0\n","subtlety                   0\n","image_file_path            0\n","cropped_image_file_path    0\n","ROI_mask_file_path         0\n","dtype: int64"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["mass_train['mass_shape'] = mass_train['mass_shape'].fillna(method='bfill')\n","mass_train['mass_margins'] = mass_train['mass_margins'].fillna(method='bfill')\n","mass_train.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32193,"status":"aborted","timestamp":1710432781939,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"xZ2w4NCEgnmI","outputId":"3a8e3de8-843f-4073-d155-76e6a1e73cdc"},"outputs":[{"data":{"text/plain":["patient_id                 0\n","breast_density             0\n","left_or_right_breast       0\n","image_view                 0\n","abnormality_id             0\n","abnormality_type           0\n","mass_shape                 0\n","mass_margins               0\n","assessment                 0\n","pathology                  0\n","subtlety                   0\n","image_file_path            0\n","cropped_image_file_path    0\n","ROI_mask_file_path         0\n","dtype: int64"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["mass_test['mass_margins'] = mass_test['mass_margins'].fillna(method='bfill')\n","mass_test.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"k-csQGWsgnmI"},"outputs":[],"source":["calc_train['calc_type'] = calc_train['calc_type'].fillna(method='bfill')\n","calc_train['calc_distribution'] = calc_train['calc_distribution'].fillna(method='bfill')\n","\n","calc_test['calc_type'] = calc_test['calc_type'].fillna(method='bfill')\n","calc_test['calc_distribution'] = calc_test['calc_distribution'].fillna(method='bfill')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uOQa3d18gnmI"},"outputs":[],"source":["mass_calc = pd.concat([mass_test, mass_train], axis=0)\n","target_size = (240, 200, 3)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32191,"status":"aborted","timestamp":1710432781939,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"-MKv3jAKgnmI","outputId":"7f58b848-e18d-4e72-9bbd-608a786e8ecb"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 1696 entries, 0 to 1317\n","Data columns (total 14 columns):\n"," #   Column                   Non-Null Count  Dtype \n","---  ------                   --------------  ----- \n"," 0   patient_id               1696 non-null   object\n"," 1   breast_density           1696 non-null   int64 \n"," 2   left_or_right_breast     1696 non-null   object\n"," 3   image_view               1696 non-null   object\n"," 4   abnormality_id           1696 non-null   int64 \n"," 5   abnormality_type         1696 non-null   object\n"," 6   mass_shape               1696 non-null   object\n"," 7   mass_margins             1696 non-null   object\n"," 8   assessment               1696 non-null   int64 \n"," 9   pathology                1696 non-null   object\n"," 10  subtlety                 1696 non-null   int64 \n"," 11  image_file_path          1696 non-null   object\n"," 12  cropped_image_file_path  1696 non-null   object\n"," 13  ROI_mask_file_path       1696 non-null   object\n","dtypes: int64(4), object(10)\n","memory usage: 198.8+ KB\n"]}],"source":["mass_calc.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"hxprNOfhgnmJ"},"outputs":[],"source":["def image_processor(image_path, target_size, base_directory=\"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg\"):\n","    \"\"\"Preprocess images for Inception V3 model with Gaussian filter and CLAHE\"\"\"\n","\n","\n","    absolute_image_path = os.path.abspath(image_path)\n","\n","    # Counter for skipped and processed images\n","    skipped_count = 0\n","    processed_count = 0\n","\n","    # Check if the image path starts with the specified directory\n","    if not absolute_image_path.startswith(base_directory):\n","        skipped_count += 1\n","        return None, skipped_count, processed_count\n","\n","    # Read the image using TensorFlow for GPU acceleration\n","    image = tf.io.read_file(absolute_image_path)\n","    image = tf.image.decode_jpeg(image, channels=3)\n","    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n","\n","    # Resize the image\n","    image = tf.image.resize(image, (target_size[0], target_size[1]))\n","\n","    # Normalize pixel values to be in the range [0, 1]\n","    image_array = image.numpy()\n","\n","    processed_count += 1\n","\n","    return image_array, skipped_count, processed_count"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"a5Ls3CtRgnmJ"},"outputs":[],"source":["result = mass_calc['image_file_path'].apply(lambda x: pd.Series(image_processor(x, target_size), index=['image_array', 'skipped_count', 'processed_count']))\n","\n","# Extract processed images, skipped count, and processed count from the result\n","mass_calc[['processed_images', 'skipped_count', 'processed_count']] = result\n","\n","# Filter out rows where processed_images is None\n","mass_calc = mass_calc.dropna(subset=['processed_images'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32189,"status":"aborted","timestamp":1710432781939,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"K0K_dVNognmJ","outputId":"bf2a32ab-2d6c-40f4-d987-d532856bc36b"},"outputs":[{"data":{"text/plain":["array([1, 0])"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["# Convert the processed_images column to an array\n","X_resized = np.array(mass_calc['processed_images'].tolist())\n","\n","# Create a binary mapper\n","class_mapper = {'MALIGNANT': 1, 'BENIGN': 0, 'BENIGN_WITHOUT_CALLBACK': 0}\n","\n","# Apply class mapper to pathology column\n","mass_calc['labels'] = mass_calc['pathology'].replace(class_mapper)\n","\n","# Check the number of classes\n","num_classes = len(mass_calc['labels'].unique())\n","mass_calc['labels'].unique()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32190,"status":"aborted","timestamp":1710432781940,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"4FrQkkG5gnmM","outputId":"234d574b-4953-410e-cfa7-093d1f5a8c25"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"mass_calc\",\n  \"rows\": 1696,\n  \"fields\": [\n    {\n      \"column\": \"patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 892,\n        \"samples\": [\n          \"P_01413\",\n          \"P_00700\",\n          \"P_00917\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"breast_density\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"left_or_right_breast\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"RIGHT\",\n          \"LEFT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_view\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"MLO\",\n          \"CC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abnormality_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"abnormality_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"mass\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass_shape\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"IRREGULAR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass_margins\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"SPICULATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"assessment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pathology\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"MALIGNANT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"subtlety\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1592,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.182177787312682499236296341930939113234/1-060.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cropped_image_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1696,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.101493470410482092525730380153954599203/1-257.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROI_mask_file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1696,\n        \"samples\": [\n          \"/kaggle/input/cbis-ddsm-breast-cancer-image-dataset/jpeg/1.3.6.1.4.1.9590.100.1.2.101493470410482092525730380153954599203/2-213.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"processed_images\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"skipped_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"processed_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labels\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"mass_calc"},"text/html":["\n","  <div id=\"df-d14a8712-6f05-4976-a75f-2b647337945c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>patient_id</th>\n","      <th>breast_density</th>\n","      <th>left_or_right_breast</th>\n","      <th>image_view</th>\n","      <th>abnormality_id</th>\n","      <th>abnormality_type</th>\n","      <th>mass_shape</th>\n","      <th>mass_margins</th>\n","      <th>assessment</th>\n","      <th>pathology</th>\n","      <th>subtlety</th>\n","      <th>image_file_path</th>\n","      <th>cropped_image_file_path</th>\n","      <th>ROI_mask_file_path</th>\n","      <th>processed_images</th>\n","      <th>skipped_count</th>\n","      <th>processed_count</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>P_00016</td>\n","      <td>4</td>\n","      <td>LEFT</td>\n","      <td>CC</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>IRREGULAR</td>\n","      <td>SPICULATED</td>\n","      <td>5</td>\n","      <td>MALIGNANT</td>\n","      <td>5</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0,...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>P_00016</td>\n","      <td>4</td>\n","      <td>LEFT</td>\n","      <td>MLO</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>IRREGULAR</td>\n","      <td>SPICULATED</td>\n","      <td>5</td>\n","      <td>MALIGNANT</td>\n","      <td>5</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>[[[0.9686275, 0.9686275, 0.9686275], [0.968864...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>P_00017</td>\n","      <td>2</td>\n","      <td>LEFT</td>\n","      <td>CC</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>ROUND</td>\n","      <td>CIRCUMSCRIBED</td>\n","      <td>4</td>\n","      <td>MALIGNANT</td>\n","      <td>4</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0,...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>P_00017</td>\n","      <td>2</td>\n","      <td>LEFT</td>\n","      <td>MLO</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>ROUND</td>\n","      <td>ILL_DEFINED</td>\n","      <td>4</td>\n","      <td>MALIGNANT</td>\n","      <td>4</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9098824...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>P_00032</td>\n","      <td>3</td>\n","      <td>RIGHT</td>\n","      <td>CC</td>\n","      <td>1</td>\n","      <td>mass</td>\n","      <td>ROUND</td>\n","      <td>OBSCURED</td>\n","      <td>0</td>\n","      <td>BENIGN</td>\n","      <td>2</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>/kaggle/input/cbis-ddsm-breast-cancer-image-da...</td>\n","      <td>[[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0,...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d14a8712-6f05-4976-a75f-2b647337945c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d14a8712-6f05-4976-a75f-2b647337945c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d14a8712-6f05-4976-a75f-2b647337945c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2f413f8a-4c90-4899-a67d-3cd7157793a0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f413f8a-4c90-4899-a67d-3cd7157793a0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2f413f8a-4c90-4899-a67d-3cd7157793a0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["  patient_id  breast_density left_or_right_breast image_view  abnormality_id  \\\n","0    P_00016               4                 LEFT         CC               1   \n","1    P_00016               4                 LEFT        MLO               1   \n","2    P_00017               2                 LEFT         CC               1   \n","3    P_00017               2                 LEFT        MLO               1   \n","4    P_00032               3                RIGHT         CC               1   \n","\n","  abnormality_type mass_shape   mass_margins  assessment  pathology  subtlety  \\\n","0             mass  IRREGULAR     SPICULATED           5  MALIGNANT         5   \n","1             mass  IRREGULAR     SPICULATED           5  MALIGNANT         5   \n","2             mass      ROUND  CIRCUMSCRIBED           4  MALIGNANT         4   \n","3             mass      ROUND    ILL_DEFINED           4  MALIGNANT         4   \n","4             mass      ROUND       OBSCURED           0     BENIGN         2   \n","\n","                                     image_file_path  \\\n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","\n","                             cropped_image_file_path  \\\n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","\n","                                  ROI_mask_file_path  \\\n","0  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","1  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","2  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","3  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","4  /kaggle/input/cbis-ddsm-breast-cancer-image-da...   \n","\n","                                    processed_images  skipped_count  \\\n","0  [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0,...              0   \n","1  [[[0.9686275, 0.9686275, 0.9686275], [0.968864...              0   \n","2  [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0,...              0   \n","3  [[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [0.9098824...              0   \n","4  [[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0,...              0   \n","\n","   processed_count  labels  \n","0                1       1  \n","1                1       1  \n","2                1       1  \n","3                1       1  \n","4                1       0  "]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["mass_calc.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"aXEnuU1RgnmM"},"outputs":[],"source":["x_train, x_temp, y_train, y_temp = train_test_split(X_resized, mass_calc['labels'].values, test_size=0.3, random_state=42)\n","x_test, x_val, y_test, y_val = train_test_split(x_temp,y_temp, test_size=0.5, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32189,"status":"aborted","timestamp":1710432781940,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"wlyXm89eXVt6","outputId":"94fdbca1-a4de-45d9-9025-887bfec9cad5"},"outputs":[{"data":{"text/plain":["array([1, 0, 0, ..., 1, 0, 1])"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["y_train"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"V7PXxPQYgnmN"},"outputs":[],"source":["y_train = to_categorical(y_train, num_classes)\n","y_test = to_categorical(y_test, num_classes)\n","y_val = to_categorical(y_val, num_classes)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32188,"status":"aborted","timestamp":1710432781940,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"jqv3cKLvYprG","outputId":"bad9b878-e6f9-48c1-b89e-f5c84f09b718"},"outputs":[{"data":{"text/plain":["array([[0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       ...,\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.]], dtype=float32)"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["y_train"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32188,"status":"aborted","timestamp":1710432781940,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"7AYhAjUugnmN","outputId":"4f34133f-5317-4311-dff4-60b77941c21b"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'  rotation_range=20,\\n    zoom_range=0.1,\\n    width_shift_range=0.1,\\n    height_shift_range=0.1,\\n    shear_range= 0.1,\\n\\n     '"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","\n","datagen = ImageDataGenerator(\n","    horizontal_flip=True,\n","    fill_mode='nearest'\n","    )\n","\n","'''  rotation_range=20,\n","    zoom_range=0.1,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    shear_range= 0.1,\n","\n","     '''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"X577B320gnmO"},"outputs":[],"source":["x_augmented = np.zeros((2200, 240, 200, 3))\n","y_augmented = np.zeros((2200, 2))\n","augmented_data_size = 2200\n","batch_size=100\n","\n","# Generate augmented data\n","generated_data_count = 0\n","for x_batch, y_batch in datagen.flow(x_train, y_train, batch_size=100, shuffle=True):\n","    if generated_data_count >= augmented_data_size or batch_size < 100:\n","        break\n","    batch_size = len(x_batch)\n","    x_augmented[generated_data_count:generated_data_count+batch_size] = x_batch\n","    y_augmented[generated_data_count:generated_data_count+batch_size] = y_batch\n","    generated_data_count += batch_size"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32187,"status":"aborted","timestamp":1710432781940,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"LBbwlzfTgnmO","outputId":"09c45606-9a4a-4fd7-c938-a8e0a2746566"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"\\nfrom tensorflow.keras.models import Sequential\\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\\nfrom tensorflow.keras.optimizers import Adam\\n\\n\\nmodel = Sequential([\\n        Conv2D(6, kernel_size=(5, 5), activation='relu', input_shape=target_size),\\n        MaxPooling2D(pool_size=(2, 2)),\\n        BatchNormalization(),\\n\\n        Conv2D(16, kernel_size=(5, 5), activation='relu'),\\n        MaxPooling2D(pool_size=(2, 2)),\\n        BatchNormalization(),\\n        Dropout(0.25),\\n\\n        Flatten(),\\n        Dense(128, activation='relu'),\\n        BatchNormalization(),\\n        Dropout(0.2),\\n\\n        Dense(64, activation='relu'),\\n        Dense(2, activation='softmax')\\n\\n])\""]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["# LeNet\n","'''\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n","from tensorflow.keras.optimizers import Adam\n","\n","\n","model = Sequential([\n","        Conv2D(6, kernel_size=(5, 5), activation='relu', input_shape=target_size),\n","        MaxPooling2D(pool_size=(2, 2)),\n","        BatchNormalization(),\n","\n","        Conv2D(16, kernel_size=(5, 5), activation='relu'),\n","        MaxPooling2D(pool_size=(2, 2)),\n","        BatchNormalization(),\n","        Dropout(0.25),\n","\n","        Flatten(),\n","        Dense(128, activation='relu'),\n","        BatchNormalization(),\n","        Dropout(0.2),\n","\n","        Dense(64, activation='relu'),\n","        Dense(2, activation='softmax')\n","\n","])'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32188,"status":"aborted","timestamp":1710432781941,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"WrhIOa6fEsmO","outputId":"a50849f9-1688-4d49-b8d3-fc5745ee4fc2"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\" \\nGoogleNet\\nfrom tensorflow.keras.models import Model\\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Dropout, Flatten, Dense, AveragePooling2D, concatenate\\n\\ndef inception_module(inputs, filters_1x1, filters_3x3_reduce, filters_3x3, filters_5x5_reduce, filters_5x5, filters_pool_proj):\\n    conv_1x1 = Conv2D(filters_1x1, (1, 1), padding='same', activation='relu')(inputs)\\n\\n    conv_3x3 = Conv2D(filters_3x3_reduce, (1, 1), padding='same', activation='relu')(inputs)\\n    conv_3x3 = Conv2D(filters_3x3, (3, 3), padding='same', activation='relu')(conv_3x3)\\n\\n    conv_5x5 = Conv2D(filters_5x5_reduce, (1, 1), padding='same', activation='relu')(inputs)\\n    conv_5x5 = Conv2D(filters_5x5, (5, 5), padding='same', activation='relu')(conv_5x5)\\n\\n    pool_proj = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(inputs)\\n    pool_proj = Conv2D(filters_pool_proj, (1, 1), padding='same', activation='relu')(pool_proj)\\n\\n    output = concatenate([conv_1x1, conv_3x3, conv_5x5, pool_proj], axis=-1)\\n    return output\\n\\n# Define input shape\\ninput_shape = (240, 200, 3)\\n\\n# Define input tensor\\ninputs = Input(shape=input_shape)\\n\\n# Stage 1\\nx = Conv2D(64, (7, 7), strides=(2, 2), padding='same', activation='relu')(inputs)\\nx = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\\n\\n# Stage 2\\nx = Conv2D(64, (1, 1), strides=(1, 1), padding='same', activation='relu')(x)\\nx = Conv2D(192, (3, 3), strides=(1, 1), padding='same', activation='relu')(x)\\nx = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\\n\\n# Inception 3a\\nx = inception_module(x, filters_1x1=64, filters_3x3_reduce=96, filters_3x3=128, filters_5x5_reduce=16, filters_5x5=32, filters_pool_proj=32)\\n\\n# Inception 3b\\nx = inception_module(x, filters_1x1=128, filters_3x3_reduce=128, filters_3x3=192, filters_5x5_reduce=32, filters_5x5=96, filters_pool_proj=64)\\n\\n# Max Pooling\\nx = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\\n\\n# Inception 4a\\nx = inception_module(x, filters_1x1=192, filters_3x3_reduce=96, filters_3x3=208, filters_5x5_reduce=16, filters_5x5=48, filters_pool_proj=64)\\n\\n# Inception 4b\\nx = inception_module(x, filters_1x1=160, filters_3x3_reduce=112, filters_3x3=224, filters_5x5_reduce=24, filters_5x5=64, filters_pool_proj=64)\\n\\n# Inception 4c\\nx = inception_module(x, filters_1x1=128, filters_3x3_reduce=128, filters_3x3=256, filters_5x5_reduce=24, filters_5x5=64, filters_pool_proj=64)\\n\\n# Inception 4d\\nx = inception_module(x, filters_1x1=112, filters_3x3_reduce=144, filters_3x3=288, filters_5x5_reduce=32, filters_5x5=64, filters_pool_proj=64)\\n\\n# Inception 4e\\nx = inception_module(x, filters_1x1=256, filters_3x3_reduce=160, filters_3x3=320, filters_5x5_reduce=32, filters_5x5=128, filters_pool_proj=128)\\n\\n# Max Pooling\\nx = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\\n\\n# Inception 5a\\nx = inception_module(x, filters_1x1=256, filters_3x3_reduce=160, filters_3x3=320, filters_5x5_reduce=32, filters_5x5=128, filters_pool_proj=128)\\n\\n# Inception 5b\\nx = inception_module(x, filters_1x1=384, filters_3x3_reduce=192, filters_3x3=384, filters_5x5_reduce=48, filters_5x5=128, filters_pool_proj=128)\\n\\n# Average Pooling\\nx = AveragePooling2D(pool_size=(7, 7), strides=(7, 7), padding='same')(x)\\n\\n# Dropout\\nx = Dropout(0.4)(x)\\n\\n# Flatten\\nx = Flatten()(x)\\n\\n# Dense layer\\noutputs = Dense(num_classes, activation='softmax')(x)\\n\\n# Create model\\nmodel = Model(inputs, outputs)\""]},"execution_count":32,"metadata":{},"output_type":"execute_result"}],"source":["'''\n","GoogleNet\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Dropout, Flatten, Dense, AveragePooling2D, concatenate\n","\n","def inception_module(inputs, filters_1x1, filters_3x3_reduce, filters_3x3, filters_5x5_reduce, filters_5x5, filters_pool_proj):\n","    conv_1x1 = Conv2D(filters_1x1, (1, 1), padding='same', activation='relu')(inputs)\n","\n","    conv_3x3 = Conv2D(filters_3x3_reduce, (1, 1), padding='same', activation='relu')(inputs)\n","    conv_3x3 = Conv2D(filters_3x3, (3, 3), padding='same', activation='relu')(conv_3x3)\n","\n","    conv_5x5 = Conv2D(filters_5x5_reduce, (1, 1), padding='same', activation='relu')(inputs)\n","    conv_5x5 = Conv2D(filters_5x5, (5, 5), padding='same', activation='relu')(conv_5x5)\n","\n","    pool_proj = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(inputs)\n","    pool_proj = Conv2D(filters_pool_proj, (1, 1), padding='same', activation='relu')(pool_proj)\n","\n","    output = concatenate([conv_1x1, conv_3x3, conv_5x5, pool_proj], axis=-1)\n","    return output\n","\n","# Define input shape\n","input_shape = (240, 200, 3)\n","\n","# Define input tensor\n","inputs = Input(shape=input_shape)\n","\n","# Stage 1\n","x = Conv2D(64, (7, 7), strides=(2, 2), padding='same', activation='relu')(inputs)\n","x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\n","\n","# Stage 2\n","x = Conv2D(64, (1, 1), strides=(1, 1), padding='same', activation='relu')(x)\n","x = Conv2D(192, (3, 3), strides=(1, 1), padding='same', activation='relu')(x)\n","x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\n","\n","# Inception 3a\n","x = inception_module(x, filters_1x1=64, filters_3x3_reduce=96, filters_3x3=128, filters_5x5_reduce=16, filters_5x5=32, filters_pool_proj=32)\n","\n","# Inception 3b\n","x = inception_module(x, filters_1x1=128, filters_3x3_reduce=128, filters_3x3=192, filters_5x5_reduce=32, filters_5x5=96, filters_pool_proj=64)\n","\n","# Max Pooling\n","x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\n","\n","# Inception 4a\n","x = inception_module(x, filters_1x1=192, filters_3x3_reduce=96, filters_3x3=208, filters_5x5_reduce=16, filters_5x5=48, filters_pool_proj=64)\n","\n","# Inception 4b\n","x = inception_module(x, filters_1x1=160, filters_3x3_reduce=112, filters_3x3=224, filters_5x5_reduce=24, filters_5x5=64, filters_pool_proj=64)\n","\n","# Inception 4c\n","x = inception_module(x, filters_1x1=128, filters_3x3_reduce=128, filters_3x3=256, filters_5x5_reduce=24, filters_5x5=64, filters_pool_proj=64)\n","\n","# Inception 4d\n","x = inception_module(x, filters_1x1=112, filters_3x3_reduce=144, filters_3x3=288, filters_5x5_reduce=32, filters_5x5=64, filters_pool_proj=64)\n","\n","# Inception 4e\n","x = inception_module(x, filters_1x1=256, filters_3x3_reduce=160, filters_3x3=320, filters_5x5_reduce=32, filters_5x5=128, filters_pool_proj=128)\n","\n","# Max Pooling\n","x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='same')(x)\n","\n","# Inception 5a\n","x = inception_module(x, filters_1x1=256, filters_3x3_reduce=160, filters_3x3=320, filters_5x5_reduce=32, filters_5x5=128, filters_pool_proj=128)\n","\n","# Inception 5b\n","x = inception_module(x, filters_1x1=384, filters_3x3_reduce=192, filters_3x3=384, filters_5x5_reduce=48, filters_5x5=128, filters_pool_proj=128)\n","\n","# Average Pooling\n","x = AveragePooling2D(pool_size=(7, 7), strides=(7, 7), padding='same')(x)\n","\n","# Dropout\n","x = Dropout(0.4)(x)\n","\n","# Flatten\n","x = Flatten()(x)\n","\n","# Dense layer\n","outputs = Dense(num_classes, activation='softmax')(x)\n","\n","# Create model\n","model = Model(inputs, outputs)'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"0ixKavJPWMqa"},"outputs":[],"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.regularizers import l2\n","\n","\n","model = Sequential([\n","        Conv2D(10, kernel_size=(5, 5),padding='same', activation='relu', input_shape=target_size, kernel_regularizer=l2(0.01)),\n","        Conv2D(24, kernel_size=(5, 5),padding='same', activation='relu', kernel_regularizer=l2(0.01)),\n","        MaxPooling2D(pool_size=(2, 2)),\n","\n","        Conv2D(36, kernel_size=(5, 5),padding='same', activation='relu', kernel_regularizer=l2(0.01)),\n","        MaxPooling2D(pool_size=(2, 2)),\n","\n","        Conv2D(64, kernel_size=(5, 5), activation='relu',kernel_regularizer=l2(0.01)),\n","        MaxPooling2D(pool_size=(2, 2)),\n","\n","        BatchNormalization(),\n","        Dropout(0.25),\n","\n","        Conv2D(72, kernel_size=(3, 3), activation='relu',kernel_regularizer=l2(0.01)),\n","\n","\n","        Flatten(),\n","        BatchNormalization(),\n","        Dropout(0.25),\n","        Dense(300, activation='relu', kernel_regularizer=l2(0.01)),\n","        BatchNormalization(),\n","        Dropout(0.25),\n","        Dense(150, activation='relu', kernel_regularizer=l2(0.01)),\n","        Dense(64, activation='relu', kernel_regularizer=l2(0.01)),\n","        Dense(2, activation='softmax')\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32187,"status":"aborted","timestamp":1710432781941,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"iB7g-hz1gnmO","outputId":"4078c441-f3d9-4e4b-b3a2-4a9305c697fe","collapsed":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 240, 200, 10)      760       \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 240, 200, 24)      6024      \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 120, 100, 24)      0         \n"," D)                                                              \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 120, 100, 36)      21636     \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 60, 50, 36)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 56, 46, 64)        57664     \n","                                                                 \n"," max_pooling2d_2 (MaxPoolin  (None, 28, 23, 64)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 26, 21, 72)        41544     \n","                                                                 \n"," flatten (Flatten)           (None, 39312)             0         \n","                                                                 \n"," dense (Dense)               (None, 300)               11793900  \n","                                                                 \n"," dense_1 (Dense)             (None, 150)               45150     \n","                                                                 \n"," dense_2 (Dense)             (None, 64)                9664      \n","                                                                 \n"," dense_3 (Dense)             (None, 2)                 130       \n","                                                                 \n","=================================================================\n","Total params: 11976472 (45.69 MB)\n","Trainable params: 11976472 (45.69 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":32186,"status":"aborted","timestamp":1710432781941,"user":{"displayName":"Akib Khan","userId":"06624025184583002856"},"user_tz":-360},"id":"_wV_v7TmgnmO","outputId":"84fa9437-cae4-4e3e-a3b3-96d317e0677d","collapsed":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","22/22 [==============================] - 457s 21s/step - loss: 4.6074 - accuracy: 0.6386 - val_loss: 5.7039 - val_accuracy: 0.5137\n","Epoch 2/10\n","22/22 [==============================] - 453s 21s/step - loss: 170.5651 - accuracy: 0.5314 - val_loss: 192.8818 - val_accuracy: 0.5137\n","Epoch 3/10\n","22/22 [==============================] - 450s 20s/step - loss: 8195.0205 - accuracy: 0.5809 - val_loss: 42172.0195 - val_accuracy: 0.5137\n","Epoch 4/10\n","21/22 [===========================>..] - ETA: 19s - loss: 152885.7656 - accuracy: 0.5348"]}],"source":["'''from tensorflow.keras.callbacks import EarlyStopping\n","\n","\n","early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)'''\n","\n","\n","history = model.fit(x_augmented, y_augmented, batch_size=100, epochs = 10, validation_data= (x_val,y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XCUj6juLgnmP"},"outputs":[],"source":["final_loss, final_accuracy = model.evaluate(x_test,y_test)\n","print(f'Final Validation Accuracy: {final_accuracy:.4f}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_oEwCVuugnmP"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","# Extract training loss and validation loss\n","train_loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","# Extract training accuracy and validation accuracy\n","train_acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","# Number of epochs\n","epochs = range(1, len(train_loss) + 1)\n","\n","# Plot training and validation loss\n","plt.figure(figsize=(10, 5))\n","plt.plot(epochs, train_loss, 'b', label='Training Loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","\n","# Plot training and validation accuracy\n","plt.figure(figsize=(10, 5))\n","plt.plot(epochs, train_acc, 'b', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ba9v35ujLqtQ"},"outputs":[],"source":["Y_pred = model.predict(x_test)\n","Y_pred_classes = np.argmax(Y_pred,axis = 1)\n","Y_true = np.argmax(y_test,axis = 1)\n","\n","confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n","f,ax = plt.subplots(figsize=(8, 8))\n","sns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"BuPu\",linecolor=\"gray\", fmt= '.1f',ax=ax)\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"True Label\")\n","plt.title(\"Confusion Matrix\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-2ggwhhGAINL"},"outputs":[],"source":["from tensorflow.keras.preprocessing.image import array_to_img\n","\n","def dis(m):\n","  image = array_to_img(m)\n","\n","  # Display the image\n","  display(image)\n","\n","for i in range(20):\n","  dis(x_augmented[i])\n","  print(y_augmented[i])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a2_J-8-3oWfN"},"outputs":[],"source":["Y_true"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"11V2p14Z07UEzyGCAL8yXr7PKd_LNXQs8","timestamp":1710361202753},{"file_id":"1fTOmA4t8SccJOAJ_6moBMxqRZyM5YT2w","timestamp":1710098897883},{"file_id":"17gq2ts1c8AJLVQyWFJ_o2TgPuNuDs9Qq","timestamp":1710005458299},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/notebookd09cf939ba-2bcc1703-c40d-4548-920e-176268f3f5ef.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240308/auto/storage/goog4_request&X-Goog-Date=20240308T192021Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=55973b5094dcd4d08f1c117269cc4a5cad56f88dff5177141daf6d551aa8c76ac6991228047133a866800eae80c3ccfac6b8f8b66ac27d175d45e0dc8573fde4ce717d4211b8adfdf0d989d0455857704db7b15782a9f9dcf1479364896878f6285d88a7e33024c4ae766096e56a0e270d2011712083c8c39aeb0521975ee08dc3e969bab76cc631a6a6689824af2f58ec1fead8ddea2efe308967fcb923402d5a99072e9736ba6daa36e48b7f40a5812b85e76d3c03a7bf8d3ccbdfb8f11a3b7bb8459003c95fe6f03f6e433b73577764d151eb6c269133e36f8c32157660c1952ba20ca4b193c999fa9eb1cadef2faa9e8b2e44659d62173752e33d3c9f6a5","timestamp":1709928774236}]},"kaggle":{"accelerator":"none","dataSources":[{"datasetId":1115384,"sourceId":1873742,"sourceType":"datasetVersion"}],"dockerImageVersionId":30664,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":0}